---
# üîê Secret pour le mot de passe postgres
apiVersion: v1
kind: Secret
metadata:
  name: postgres-secret
type: Opaque
data:
  POSTGRES_PASSWORD: cG9zdGdyZXNxbDEyMw==  # "postgresql123" encod√© en base64

---
# ‚öôÔ∏è ConfigMap pour script d'init SQL (cr√©ation DB/utilisateur)
apiVersion: v1
kind: ConfigMap
metadata:
  name: postgres-init-script
data:
  init.sql: |
    CREATE DATABASE demo;
    CREATE USER demo_user WITH ENCRYPTED PASSWORD 'demopass';
    GRANT ALL PRIVILEGES ON DATABASE demo TO demo_user;

---
# üíæ PVC pour la persistance des donn√©es PostgreSQL
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: postgres-pvc
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi

---
# üöÄ D√©ploiement PostgreSQL avec secret et configmap
apiVersion: apps/v1
kind: Deployment
metadata:
  name: postgres
spec:
  replicas: 1
  selector:
    matchLabels:
      app: postgres
  template:
    metadata:
      labels:
        app: postgres
    spec:
      containers:
      - name: postgres
        image: postgres:15
        ports:
        - containerPort: 5432
        env:
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: postgres-secret
              key: POSTGRES_PASSWORD
        volumeMounts:
        - name: data
          mountPath: /var/lib/postgresql/data
        - name: init-script
          mountPath: /docker-entrypoint-initdb.d/init.sql
          subPath: init.sql
        resources:
          requests:
            cpu: 100m
            memory: 256Mi
          limits:
            cpu: 200m
            memory: 512Mi
      volumes:
      - name: data
        persistentVolumeClaim:
          claimName: postgres-pvc
      - name: init-script
        configMap:
          name: postgres-init-script

---
# üåê Service avec NodePort pour exposer PostgreSQL en d√©mo (attention s√©curit√©)
apiVersion: v1
kind: Service
metadata:
  name: postgres
spec:
  type: NodePort
  selector:
    app: postgres
  ports:
  - name: postgres
    port: 5432
    targetPort: 5432
    nodePort: 30032  # Port d'acc√®s externe depuis l'IP publique de la VM EC2
